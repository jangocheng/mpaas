/*
 * Copyright 2008-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ghost.framework.data.jdbc.jpa.plugin.repository.core;

//import ghost.framework.beans.factory.config.IBeanDefinition;
//import ghost.framework.beans.factory.parsing.BeanComponentDefinition;
//import ghost.framework.beans.factory.parsing.ReaderContext;
//import ghost.framework.beans.factory.support.BeanDefinitionRegistry;
//import ghost.framework.beans.factory.xml.BeanDefinitionParser;
//import ghost.framework.beans.factory.xml.ParserContext;
//import ghost.framework.beans.factory.xml.XmlReaderContext;
//import ghost.framework.core.env.Environment;
//import ghost.framework.core.io.IResourceLoader;
//import ghost.framework.data.config.ConfigurationUtils;
//import ghost.framework.lang.Nullable;
//import ghost.framework.util.Assert;

import ghost.framework.beans.annotation.constraints.Nullable;
import ghost.framework.context.bean.IBeanDefinition;
import ghost.framework.context.environment.Environment;
import ghost.framework.context.factory.BeanDefinitionRegistry;
import ghost.framework.context.factory.parsing.BeanComponentDefinition;
import ghost.framework.context.io.IResourceLoader;
import ghost.framework.context.parsing.ReaderContext;
import ghost.framework.context.xml.BeanDefinitionParser;
import ghost.framework.context.xml.ParserContext;
import ghost.framework.context.xml.XmlReaderContext;
import ghost.framework.data.commons.ConfigurationUtils;
import ghost.framework.data.commons.repository.config.RepositoryConfigurationExtension;
import ghost.framework.data.commons.repository.config.XmlRepositoryConfigurationSource;
import ghost.framework.data.jdbc.jpa.plugin.repository.config.RepositoryConfigurationDelegate;
import ghost.framework.data.commons.repository.config.RepositoryConfigurationUtils;
import ghost.framework.util.Assert;
import org.w3c.dom.Element;

import static ghost.framework.context.factory.BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR;

//import static ghost.framework.beans.factory.support.BeanDefinitionReaderUtils.*;
//import static ghost.framework.beans.factory.support.BeanDefinitionReaderUtils.GENERATED_BEAN_NAME_SEPARATOR;

/**
 * Base class to implement repository namespaces. These will typically consist of a main XML element potentially having
 * child elements. The parser will wrap the XML element into a {@link GlobalRepositoryConfigInformation} object and
 * allow either manual configuration or automatic detection of repository interfaces.
 *
 * @author Oliver Gierke
 */
public class RepositoryBeanDefinitionParser implements BeanDefinitionParser {

	private final RepositoryConfigurationExtension extension;

	/**
	 * Creates a new {@link RepositoryBeanDefinitionParser} using the given {@link RepositoryConfigurationExtension}.
	 *
	 * @param extension must not be {@literal null}.
	 */
	public RepositoryBeanDefinitionParser(RepositoryConfigurationExtension extension) {

		Assert.notNull(extension, "Extension must not be null!");
		this.extension = extension;
	}
	/*
	 * (non-Javadoc)
	 * @see ghost.framework.beans.factory.xml.BeanDefinitionParser#parse(org.w3c.dom.Element, ghost.framework.beans.factory.xml.ParserContext)
	 */
	@Nullable
	public IBeanDefinition parse(Element element, ParserContext parser) {

		XmlReaderContext readerContext = parser.getReaderContext();

		try {
			IResourceLoader IResourceLoader = ConfigurationUtils.getRequiredResourceLoader(readerContext);
			Environment environment = readerContext.getEnvironment();
			BeanDefinitionRegistry registry = parser.getRegistry();
			XmlRepositoryConfigurationSource configSource = new XmlRepositoryConfigurationSource(element, parser, environment);
			RepositoryConfigurationDelegate delegate = new RepositoryConfigurationDelegate(configSource, IResourceLoader, environment);
			RepositoryConfigurationUtils.exposeRegistration(extension, registry, configSource);
			for (BeanComponentDefinition definition : delegate.registerRepositoriesIn(registry, extension)) {
				readerContext.fireComponentRegistered(definition);
			}
		} catch (RuntimeException e) {
			handleError(e, element, readerContext);
		}

		return null;
	}

	private void handleError(Exception e, Element source, ReaderContext reader) {
		reader.error(e.getMessage(), reader.extractSource(source), e);
	}

	/**
	 * Returns whether the given {@link BeanDefinitionRegistry} already contains a bean of the given type assuming the
	 * bean name has been autogenerated.
	 *
	 * @param type
	 * @param registry
	 * @return
	 */
	protected static boolean hasBean(Class<?> type, BeanDefinitionRegistry registry) {

		String name = String.format("%s%s0", type.getName(), GENERATED_BEAN_NAME_SEPARATOR);
		return registry.containsBeanDefinition(name);
	}
}
